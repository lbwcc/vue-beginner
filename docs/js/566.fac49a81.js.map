{"version":3,"file":"js/566.fac49a81.js","mappings":"+XAGA,MAAMA,GAAU,QAAI,KACdC,GAAO,QAAI,MACXC,GAAW,QAAI,MACfC,GAAoB,SAAI,GACxBC,GAAQ,SAAI,GAEZC,GAAe,SAAS,IACxBD,EAAME,MAAc,KACjBN,EAAQM,QAGjB,SAASC,EAASC,GACZJ,EAAME,QACNH,EAAkBG,OACpBN,EAAQM,MAAQE,EAChBL,EAAkBG,OAAQ,GAEJ,MAAlBN,EAAQM,MACVN,EAAQM,MAAQE,EAEhBR,EAAQM,OAASE,EAGvB,CACA,SAASC,IACP,IAAIL,EAAME,MACV,OAAIH,EAAkBG,OACpBN,EAAQM,MAAQ,UAChBH,EAAkBG,OAAQ,SAGvBN,EAAQM,MAAMI,SAAS,OAC1BV,EAAQM,OAAS,KAErB,CACA,SAASK,EAAcC,GACrB,GAAIR,EAAME,MAAO,OACjB,MAAMO,EAAaC,WAAWd,EAAQM,OACtC,GAAIJ,EAASI,OAASH,EAAkBG,MACtCJ,EAASI,MAAQM,MADnB,CAIA,GAAkB,MAAdX,EAAKK,MACPL,EAAKK,MAAQO,OACR,GAAIX,EAASI,MAAO,CACzB,MAAMS,EAASC,EAAYf,EAAKK,MAAOO,EAAYX,EAASI,OAC5D,GAAe,UAAXS,EAGF,OAFAX,EAAME,OAAQ,OACdN,EAAQM,MAAQ,MAGlBL,EAAKK,MAAQS,EACbf,EAAQM,MAAQW,OAAOF,EACzB,CACAb,EAASI,MAAQM,EACjBT,EAAkBG,OAAQ,CAd1B,CAeF,CACA,SAASU,EAAYE,EAAGC,EAAGC,GACzB,OAAQA,GACN,IAAK,IAAK,OAAOF,EAAIC,EACrB,IAAK,IAAK,OAAOD,EAAIC,EACrB,IAAK,IAAK,OAAOD,EAAIC,EACrB,IAAK,IAAK,OAAa,IAANA,EAAU,QAAUD,EAAIC,EACzC,QAAS,OAAOA,EAEpB,CACA,SAASE,IACP,IAAIjB,EAAME,OACNJ,EAASI,OAAuB,MAAdL,EAAKK,MAAe,CACxC,MAAMO,EAAaC,WAAWd,EAAQM,OAChCS,EAASC,EAAYf,EAAKK,MAAOO,EAAYX,EAASI,OAC5D,GAAe,UAAXS,EAGF,OAFAX,EAAME,OAAQ,OACdN,EAAQM,MAAQ,MAGlBN,EAAQM,MAAQW,OAAOF,GACvBd,EAAKK,MAAQ,KACbJ,EAASI,MAAQ,KACjBH,EAAkBG,OAAQ,CAC5B,CACF,CACA,SAASgB,IACPtB,EAAQM,MAAQ,IAChBL,EAAKK,MAAQ,KACbJ,EAASI,MAAQ,KACjBH,EAAkBG,OAAQ,EAC1BF,EAAME,OAAQ,CAChB,CACA,SAASiB,IACHnB,EAAME,QACNN,EAAQM,MAAMkB,OAAS,EACzBxB,EAAQM,MAAQN,EAAQM,MAAMmB,MAAM,GAAI,GAExCzB,EAAQM,MAAQ,IAEpB,CACA,SAASoB,IACHtB,EAAME,OACY,MAAlBN,EAAQM,QACRN,EAAQM,MAAMqB,WAAW,KAC3B3B,EAAQM,MAAQN,EAAQM,MAAMmB,MAAM,GAEpCzB,EAAQM,MAAQ,IAAMN,EAAQM,MAElC,C,qrFCtGA,MAAMsB,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://vue-beginner/./src/views/Calculator.vue","webpack://vue-beginner/./src/views/Calculator.vue?193e"],"sourcesContent":["<script setup>\r\nimport { ref, computed } from 'vue'\r\n\r\nconst current = ref('0')\r\nconst prev = ref(null)\r\nconst operator = ref(null)\r\nconst waitingForOperand = ref(false)\r\nconst error = ref(false)\r\n\r\nconst displayValue = computed(() => {\r\n  if (error.value) return '错误'\r\n  return current.value\r\n})\r\n\r\nfunction inputNum(num) {\r\n  if (error.value) return\r\n  if (waitingForOperand.value) {\r\n    current.value = num\r\n    waitingForOperand.value = false\r\n  } else {\r\n    if (current.value === '0') {\r\n      current.value = num\r\n    } else {\r\n      current.value += num\r\n    }\r\n  }\r\n}\r\nfunction inputDot() {\r\n  if (error.value) return\r\n  if (waitingForOperand.value) {\r\n    current.value = '0.'\r\n    waitingForOperand.value = false\r\n    return\r\n  }\r\n  if (!current.value.includes('.')) {\r\n    current.value += '.'\r\n  }\r\n}\r\nfunction inputOperator(nextOperator) {\r\n  if (error.value) return\r\n  const inputValue = parseFloat(current.value)\r\n  if (operator.value && waitingForOperand.value) {\r\n    operator.value = nextOperator\r\n    return\r\n  }\r\n  if (prev.value == null) {\r\n    prev.value = inputValue\r\n  } else if (operator.value) {\r\n    const result = performCalc(prev.value, inputValue, operator.value)\r\n    if (result === 'error') {\r\n      error.value = true\r\n      current.value = '错误'\r\n      return\r\n    }\r\n    prev.value = result\r\n    current.value = String(result)\r\n  }\r\n  operator.value = nextOperator\r\n  waitingForOperand.value = true\r\n}\r\nfunction performCalc(a, b, op) {\r\n  switch (op) {\r\n    case '+': return a + b\r\n    case '-': return a - b\r\n    case '*': return a * b\r\n    case '/': return b === 0 ? 'error' : a / b\r\n    default: return b\r\n  }\r\n}\r\nfunction calculateResult() {\r\n  if (error.value) return\r\n  if (operator.value && prev.value != null) {\r\n    const inputValue = parseFloat(current.value)\r\n    const result = performCalc(prev.value, inputValue, operator.value)\r\n    if (result === 'error') {\r\n      error.value = true\r\n      current.value = '错误'\r\n      return\r\n    }\r\n    current.value = String(result)\r\n    prev.value = null\r\n    operator.value = null\r\n    waitingForOperand.value = false\r\n  }\r\n}\r\nfunction clean() {\r\n  current.value = '0'\r\n  prev.value = null\r\n  operator.value = null\r\n  waitingForOperand.value = false\r\n  error.value = false\r\n}\r\nfunction backspace() {\r\n  if (error.value) return\r\n  if (current.value.length > 1) {\r\n    current.value = current.value.slice(0, -1)\r\n  } else {\r\n    current.value = '0'\r\n  }\r\n}\r\nfunction toggleSign() {\r\n  if (error.value) return\r\n  if (current.value === '0') return\r\n  if (current.value.startsWith('-')) {\r\n    current.value = current.value.slice(1)\r\n  } else {\r\n    current.value = '-' + current.value\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div id=\"main\">\r\n    <div id=\"box\">\r\n      <div id=\"result\">\r\n        <div>{{ displayValue }}</div>\r\n      </div>\r\n      <div id=\"operation\">\r\n        <div class=\"line\">\r\n          <el-button class=\"operation\" @click=\"clean\" round> C </el-button>\r\n          <el-button class=\"operation\" @click=\"backspace\" round> ⌫ </el-button>\r\n          <el-button class=\"operation\" @click=\"toggleSign\" round> ± </el-button>\r\n          <el-button class=\"operation\"  @click=\"inputOperator('/')\" round> ÷ </el-button>\r\n        </div>\r\n        <div class=\"line\">\r\n          <el-button class=\"number\" @click=\"inputNum('7')\" round> 7 </el-button>\r\n          <el-button class=\"number\" @click=\"inputNum('8')\" round> 8 </el-button>\r\n          <el-button class=\"number\" @click=\"inputNum('9')\" round> 9 </el-button>\r\n          <el-button class=\"operation\"  @click=\"inputOperator('*')\" round> × </el-button>\r\n        </div>\r\n        <div class=\"line\">\r\n          <el-button class=\"number\" @click=\"inputNum('4')\" round> 4 </el-button>\r\n          <el-button class=\"number\" @click=\"inputNum('5')\" round> 5 </el-button>\r\n          <el-button class=\"number\" @click=\"inputNum('6')\" round> 6 </el-button>\r\n          <el-button class=\"operation\" @click=\"inputOperator('-')\" round> - </el-button>\r\n        </div>\r\n        <div class=\"line\">\r\n          <el-button class=\"number\" @click=\"inputNum('1')\" round> 1 </el-button>\r\n          <el-button class=\"number\" @click=\"inputNum('2')\" round> 2 </el-button>\r\n          <el-button class=\"number\" @click=\"inputNum('3')\" round> 3 </el-button>\r\n          <el-button class=\"operation\" @click=\"inputOperator('+')\" round> + </el-button>\r\n        </div>\r\n        <div class=\"line\">\r\n          <el-button class=\"number zero\" @click=\"inputNum('0')\" round> 0 </el-button>\r\n          <el-button class=\"number\" @click=\"inputDot\" round> . </el-button>\r\n          <el-button class=\"operation equal\" @click=\"calculateResult\" round> = </el-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"less\" scoped>\r\n#main {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: #f5f6fa;\r\n}\r\n#box {\r\n  border-radius: 24px;\r\n  min-height: 400px;\r\n  height: auto;\r\n  width: 90%;\r\n  max-width: 350px;\r\n  background: #fff;\r\n  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.2);\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 32px 16px 24px 16px;\r\n  box-sizing: border-box;\r\n}\r\n#result {\r\n  border-radius: 12px;\r\n  margin-top: 0;\r\n  width: 100%;\r\n  height: 80px;\r\n  background: #222831;\r\n  color: #fff;\r\n  font-size: 36px;\r\n  display: flex;\r\n  align-items: flex-end;\r\n  justify-content: flex-end;\r\n  padding: 16px;\r\n  box-sizing: border-box;\r\n  margin-bottom: 24px;\r\n  word-break: break-all;\r\n}\r\n#operation {\r\n  border-radius: 12px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  height: auto;\r\n  justify-content: space-between;\r\n}\r\n.line {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  margin-bottom: 16px;\r\n}\r\n.number {\r\n  font-size: 22px;\r\n  width: 64px;\r\n  height: 56px;\r\n  background-color: #393e46;\r\n  color: #fff;\r\n  border: none;\r\n  margin: 0 4px;\r\n}\r\n.number.zero {\r\n  flex: 2;\r\n  width: 136px;\r\n}\r\n.operation {\r\n  font-size: 22px;\r\n  width: 64px;\r\n  height: 56px;\r\n  background-color: #eeeeee;\r\n  color: #ff9800;\r\n  border: none;\r\n  margin: 0 4px;\r\n}\r\n.operation.equal {\r\n  background-color: #ff9800;\r\n  color: #fff;\r\n}\r\n.number:active, .operation:active {\r\n  filter: brightness(0.85);\r\n  transform: scale(0.96);\r\n  transition: filter 0.1s, transform 0.1s;\r\n}\r\n@media (max-width: 400px) {\r\n  #box {\r\n    width: 90vw;\r\n    min-width: 0;\r\n    max-width: 100vw;\r\n    height: auto;\r\n    padding: 8px;\r\n  }\r\n  #result {\r\n    font-size: 24px;\r\n    height: 56px;\r\n    padding: 8px;\r\n  }\r\n  .number, .operation {\r\n    width: 48px;\r\n    height: 40px;\r\n    font-size: 16px;\r\n  }\r\n  .number.zero {\r\n    width: 104px;\r\n  }\r\n}\r\n@media (max-width: 600px) {\r\n  #main {\r\n    padding: 0;\r\n  }\r\n  #box {\r\n    width: 90vw;\r\n    min-width: 0;\r\n    max-width: 100vw;\r\n    height: auto;\r\n    padding: 8px 2vw 16px 2vw;\r\n    box-shadow: none;\r\n    border-radius: 0;\r\n  }\r\n  #result {\r\n    font-size: 22px;\r\n    height: 48px;\r\n    padding: 6px;\r\n    margin-bottom: 12px;\r\n  }\r\n  .number, .operation {\r\n    width: 20vw;\r\n    min-width: 0;\r\n    height: 36px;\r\n    font-size: 15px;\r\n    margin: 0 2px;\r\n  }\r\n  .number.zero {\r\n    width: 44vw;\r\n  }\r\n  .line {\r\n    margin-bottom: 8px;\r\n  }\r\n}\r\n</style>","import script from \"./Calculator.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Calculator.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Calculator.vue?vue&type=style&index=0&id=5d93c7cd&lang=less&scoped=true\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-5d93c7cd\"]])\n\nexport default __exports__"],"names":["current","prev","operator","waitingForOperand","error","displayValue","value","inputNum","num","inputDot","includes","inputOperator","nextOperator","inputValue","parseFloat","result","performCalc","String","a","b","op","calculateResult","clean","backspace","length","slice","toggleSign","startsWith","__exports__"],"sourceRoot":""}