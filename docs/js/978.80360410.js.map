{"version":3,"file":"js/978.80360410.js","mappings":"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","sources":["webpack://vue-beginner/./src/views/Tetris.vue","webpack://vue-beginner/./src/views/Tetris.vue?111f"],"sourcesContent":["<template>\r\n  <div class=\"tetris-container\">\r\n    <div class=\"tetris-info\">\r\n      <div>分数：{{ score }}</div>\r\n      <div>状态：{{ isGameOver ? '游戏结束' : (isPaused ? '暂停' : '进行中') }}</div>\r\n      <button @click=\"startGame\" v-if=\"!isStarted || isGameOver\">开始</button>\r\n      <button @click=\"pauseGame\" v-if=\"isStarted && !isPaused && !isGameOver\">暂停</button>\r\n      <button @click=\"resumeGame\" v-if=\"isPaused && !isGameOver\">继续</button>\r\n      <button @click=\"restartGame\" v-if=\"isStarted\">重开</button>\r\n    </div>\r\n    <div class=\"tetris-board\">\r\n      <div v-for=\"(row, y) in displayBoard\" :key=\"y\" class=\"tetris-row\">\r\n        <div v-for=\"(cell, x) in row\" :key=\"x\" class=\"tetris-cell\"\r\n          :style=\"cell ? { background: cell, borderColor: cell } : {}\">\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nconst COLS = 10;\r\nconst ROWS = 20;\r\nconst SHAPES = [\r\n  // I\r\n  [\r\n    [0,0,0,0],\r\n    [1,1,1,1],\r\n    [0,0,0,0],\r\n    [0,0,0,0]\r\n  ],\r\n  // J\r\n  [\r\n    [1,0,0],\r\n    [1,1,1],\r\n    [0,0,0]\r\n  ],\r\n  // L\r\n  [\r\n    [0,0,1],\r\n    [1,1,1],\r\n    [0,0,0]\r\n  ],\r\n  // O\r\n  [\r\n    [1,1],\r\n    [1,1]\r\n  ],\r\n  // S\r\n  [\r\n    [0,1,1],\r\n    [1,1,0],\r\n    [0,0,0]\r\n  ],\r\n  // T\r\n  [\r\n    [0,1,0],\r\n    [1,1,1],\r\n    [0,0,0]\r\n  ],\r\n  // Z\r\n  [\r\n    [1,1,0],\r\n    [0,1,1],\r\n    [0,0,0]\r\n  ]\r\n];\r\n\r\nconst MORANDI_COLORS = [\r\n  '#B7AFA3', // 莫兰迪灰\r\n  '#A7A69D', // 莫兰迪绿灰\r\n  '#C1B7A3', // 莫兰迪米\r\n  '#A3A7B7', // 莫兰迪蓝灰\r\n  '#B7A3A7', // 莫兰迪粉灰\r\n  '#B7B3A3', // 莫兰迪黄灰\r\n  '#A3B7B3', // 莫兰迪青灰\r\n  '#B7A3B3', // 莫兰迪紫灰\r\n  '#A3B3B7', // 莫兰迪蓝绿\r\n  '#B3B7A3'  // 莫兰迪橄榄\r\n];\r\n\r\nfunction getRandomShape() {\r\n  const shape = SHAPES[Math.floor(Math.random() * SHAPES.length)];\r\n  // 深拷贝\r\n  return shape.map(row => row.slice());\r\n}\r\n\r\nexport default {\r\n  name: 'Tetris',\r\n  data() {\r\n    return {\r\n      board: [], // 存颜色字符串或 null\r\n      current: null,\r\n      currentX: 0,\r\n      currentY: 0,\r\n      currentColor: '',\r\n      timer: null,\r\n      interval: 500,\r\n      isStarted: false,\r\n      isPaused: false,\r\n      isGameOver: false,\r\n      score: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    displayBoard() {\r\n      // 渲染用：固定块为颜色字符串，活动块为 currentColor\r\n      let temp = this.board.map(row => row.slice());\r\n      if (this.current) {\r\n        for (let y = 0; y < this.current.length; y++) {\r\n          for (let x = 0; x < this.current[y].length; x++) {\r\n            if (this.current[y][x]) {\r\n              let px = this.currentX + x;\r\n              let py = this.currentY + y;\r\n              if (py >= 0 && py < temp.length && px >= 0 && px < temp[0].length) {\r\n                temp[py][px] = this.currentColor || '#B7AFA3';\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return temp;\r\n    }\r\n  },\r\n  mounted() {\r\n    window.addEventListener('keydown', this.handleKey);\r\n    this.resetBoard();\r\n    // 触摸事件\r\n    const board = this.$el.querySelector('.tetris-board');\r\n    let startX = 0, startY = 0, moved = false;\r\n    if (board) {\r\n      board.addEventListener('touchstart', e => {\r\n        if (e.touches.length === 1) {\r\n          startX = e.touches[0].clientX;\r\n          startY = e.touches[0].clientY;\r\n          moved = false;\r\n        }\r\n      });\r\n      board.addEventListener('touchmove', e => {\r\n        if (!this.isStarted || this.isPaused || this.isGameOver) return;\r\n        if (e.touches.length === 1) {\r\n          const dx = e.touches[0].clientX - startX;\r\n          const dy = e.touches[0].clientY - startY;\r\n          if (Math.abs(dx) > 30 && !moved) {\r\n            if (dx > 0) {\r\n              this.handleKey({ key: 'ArrowRight' });\r\n            } else {\r\n              this.handleKey({ key: 'ArrowLeft' });\r\n            }\r\n            moved = true;\r\n          } else if (Math.abs(dy) > 30 && !moved) {\r\n            if (dy > 0) {\r\n              this.handleKey({ key: 'ArrowDown' });\r\n              moved = true;\r\n            }\r\n          }\r\n        }\r\n      });\r\n      board.addEventListener('touchend', e => {\r\n        if (!moved) {\r\n          // 轻点旋转\r\n          this.handleKey({ key: 'ArrowUp' });\r\n        }\r\n      });\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    window.removeEventListener('keydown', this.handleKey);\r\n    this.stopTimer();\r\n  },\r\n  methods: {\r\n    resetBoard() {\r\n      this.board = Array.from({ length: ROWS }, () => Array(COLS).fill(null));\r\n    },\r\n    startGame() {\r\n      this.resetBoard();\r\n      this.score = 0;\r\n      this.isStarted = true;\r\n      this.isPaused = false;\r\n      this.isGameOver = false;\r\n      this.spawn();\r\n      this.startTimer();\r\n    },\r\n    pauseGame() {\r\n      this.isPaused = true;\r\n      this.stopTimer();\r\n    },\r\n    resumeGame() {\r\n      this.isPaused = false;\r\n      this.startTimer();\r\n    },\r\n    restartGame() {\r\n      this.startGame();\r\n    },\r\n    startTimer() {\r\n      this.stopTimer();\r\n      this.timer = setInterval(this.tick, this.interval);\r\n    },\r\n    stopTimer() {\r\n      if (this.timer) {\r\n        clearInterval(this.timer);\r\n        this.timer = null;\r\n      }\r\n    },\r\n    spawn() {\r\n      this.current = getRandomShape();\r\n      this.currentY = 0;\r\n      this.currentX = Math.floor((COLS - this.current[0].length) / 2);\r\n      this.currentColor = MORANDI_COLORS[Math.floor(Math.random() * MORANDI_COLORS.length)];\r\n      if (!this.isValid(this.currentX, this.currentY, this.current)) {\r\n        this.isGameOver = true;\r\n        this.stopTimer();\r\n      }\r\n    },\r\n    merge() {\r\n      for (let y = 0; y < this.current.length; y++) {\r\n        for (let x = 0; x < this.current[y].length; x++) {\r\n          if (this.current[y][x]) {\r\n            this.board[this.currentY + y][this.currentX + x] = this.currentColor;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    isValid(nx, ny, shape) {\r\n      for (let y = 0; y < shape.length; y++) {\r\n        for (let x = 0; x < shape[y].length; x++) {\r\n          if (shape[y][x]) {\r\n            let px = nx + x;\r\n            let py = ny + y;\r\n            if (px < 0 || px >= COLS || py < 0 || py >= ROWS) return false;\r\n            if (this.board[py][px]) return false;\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    },\r\n    tick() {\r\n      if (this.isPaused || this.isGameOver) return;\r\n      if (this.isValid(this.currentX, this.currentY + 1, this.current)) {\r\n        this.currentY++;\r\n      } else {\r\n        this.merge();\r\n        this.clearLines();\r\n        this.spawn();\r\n      }\r\n    },\r\n    clearLines() {\r\n      let lines = 0;\r\n      for (let y = ROWS - 1; y >= 0; y--) {\r\n        if (this.board[y].every(cell => cell)) {\r\n          this.board.splice(y, 1);\r\n          this.board.unshift(Array(COLS).fill(null));\r\n          lines++;\r\n          y++;\r\n        }\r\n      }\r\n      if (lines > 0) {\r\n        this.score += lines * 100;\r\n      }\r\n    },\r\n    handleKey(e) {\r\n      if (!this.isStarted || this.isPaused || this.isGameOver) return;\r\n      if (!this.current) return;\r\n      // 阻止方向键和空格键的默认行为（如页面滚动）\r\n      if ([\"ArrowLeft\", \"ArrowRight\", \"ArrowDown\", \"ArrowUp\", \" \"].includes(e.key)) {\r\n        e.preventDefault && e.preventDefault();\r\n        e.stopPropagation && e.stopPropagation();\r\n      }\r\n      if (e.key === 'ArrowLeft') {\r\n        if (this.isValid(this.currentX - 1, this.currentY, this.current)) {\r\n          this.currentX--;\r\n        }\r\n      } else if (e.key === 'ArrowRight') {\r\n        if (this.isValid(this.currentX + 1, this.currentY, this.current)) {\r\n          this.currentX++;\r\n        }\r\n      } else if (e.key === 'ArrowDown') {\r\n        // 只移动，不写入 board\r\n        if (this.isValid(this.currentX, this.currentY + 1, this.current)) {\r\n          this.currentY++;\r\n        }\r\n      } else if (e.key === 'ArrowUp') {\r\n        // 旋转\r\n        const rotated = this.rotate(this.current);\r\n        if (this.isValid(this.currentX, this.currentY, rotated)) {\r\n          this.current = rotated;\r\n        }\r\n      } else if (e.key === ' ') {\r\n        // 空格快速下落到底\r\n        while (this.isValid(this.currentX, this.currentY + 1, this.current)) {\r\n          this.currentY++;\r\n        }\r\n        // 到底后才 merge\r\n        this.tick();\r\n      }\r\n    },\r\n    rotate(shape) {\r\n      // 顺时针旋转\r\n      const N = shape.length;\r\n      let ret = Array.from({ length: N }, () => Array(N).fill(0));\r\n      for (let y = 0; y < N; y++) {\r\n        for (let x = 0; x < N; x++) {\r\n          ret[x][N - 1 - y] = shape[y][x];\r\n        }\r\n      }\r\n      return ret;\r\n    },\r\n  }\r\n};\r\n</script>\r\n<style scoped>\r\n.tetris-container {\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap: 24px;\r\n  margin: 32px auto;\r\n  width: max-content;\r\n  max-width: 100vw;\r\n}\r\n@media (max-width: 600px) {\r\n  .tetris-container {\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 12px;\r\n    margin: 8px auto;\r\n    width: 100vw;\r\n  }\r\n  .tetris-board {\r\n    width: 96vw;\r\n    height: 192vw;\r\n    max-width: 320px;\r\n    max-height: 640px;\r\n  }\r\n  .tetris-row {\r\n    height: calc(192vw / 20);\r\n  }\r\n  .tetris-cell {\r\n    width: calc(96vw / 10);\r\n    height: calc(192vw / 20);\r\n  }\r\n}\r\n.tetris-info {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n  justify-content: flex-start;\r\n}\r\n.tetris-board {\r\n  display: flex;\r\n  flex-direction: column;\r\n  background: #222;\r\n  border: 4px solid #444;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px #0006;\r\n  width: 240px;\r\n  height: 480px;\r\n}\r\n.tetris-row {\r\n  display: flex;\r\n  flex-direction: row;\r\n  height: 24px;\r\n}\r\n.tetris-cell {\r\n  width: 24px;\r\n  height: 24px;\r\n  border: 1px solid #333;\r\n  background: #222;\r\n  box-sizing: border-box;\r\n}\r\n.tetris-cell.filled {\r\n  background: #4dd0e1;\r\n  border: 1px solid #00bcd4;\r\n}\r\n.tetris-cell.active {\r\n  background: #ffb300;\r\n  border: 1px solid #ff9800;\r\n}\r\n</style>","import { render } from \"./Tetris.vue?vue&type=template&id=3de9053b&scoped=true\"\nimport script from \"./Tetris.vue?vue&type=script&lang=js\"\nexport * from \"./Tetris.vue?vue&type=script&lang=js\"\n\nimport \"./Tetris.vue?vue&type=style&index=0&id=3de9053b&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-3de9053b\"]])\n\nexport default __exports__"],"names":["class","score","isGameOver","isPaused","isStarted","startGame","pauseGame","resumeGame","restartGame","displayBoard","row","y","key","cell","x","style","background","borderColor","COLS","ROWS","SHAPES","MORANDI_COLORS","getRandomShape","shape","Math","floor","random","length","map","slice","name","data","board","current","currentX","currentY","currentColor","timer","interval","computed","temp","this","px","py","mounted","window","addEventListener","handleKey","resetBoard","$el","querySelector","startX","startY","moved","e","touches","clientX","clientY","dx","dy","abs","beforeUnmount","removeEventListener","stopTimer","methods","Array","from","fill","spawn","startTimer","setInterval","tick","clearInterval","isValid","merge","nx","ny","clearLines","lines","every","splice","unshift","includes","preventDefault","stopPropagation","rotated","rotate","N","ret","__exports__","render"],"sourceRoot":""}